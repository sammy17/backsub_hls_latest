// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      backsub
`define AUTOTB_DUT_INST AESL_inst_backsub
`define AUTOTB_TOP      apatb_backsub_top
`define AUTOTB_LAT_RESULT_FILE "backsub.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "backsub.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_backsub_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  8
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00
`define LENGTH_inStream_V_data_V 38400
`define LENGTH_inStream_V_keep_V 38400
`define LENGTH_inStream_V_strb_V 38400
`define LENGTH_inStream_V_user_V 38400
`define LENGTH_inStream_V_last_V 38400
`define LENGTH_inStream_V_id_V 38400
`define LENGTH_inStream_V_dest_V 38400
`define LENGTH_outStream_V_data_V 76800
`define LENGTH_outStream_V_keep_V 76800
`define LENGTH_outStream_V_strb_V 76800
`define LENGTH_outStream_V_user_V 76800
`define LENGTH_outStream_V_last_V 76800
`define LENGTH_outStream_V_id_V 76800
`define LENGTH_outStream_V_dest_V 76800
`define LENGTH_frame 76800
`define LENGTH_init 1
`define LENGTH_ap_return 1

`define   AESL_DEPTH_inStream_V_data_V 1
`define   AESL_DEPTH_inStream_V_keep_V 1
`define   AESL_DEPTH_inStream_V_strb_V 1
`define   AESL_DEPTH_inStream_V_user_V 1
`define   AESL_DEPTH_inStream_V_last_V 1
`define   AESL_DEPTH_inStream_V_id_V 1
`define   AESL_DEPTH_inStream_V_dest_V 1
`define   AESL_DEPTH_outStream_V_data_V 1
`define   AESL_DEPTH_outStream_V_keep_V 1
`define   AESL_DEPTH_outStream_V_strb_V 1
`define   AESL_DEPTH_outStream_V_user_V 1
`define   AESL_DEPTH_outStream_V_last_V 1
`define   AESL_DEPTH_outStream_V_id_V 1
`define   AESL_DEPTH_outStream_V_dest_V 1
`define	AESL_BRAM_frame AESL_autobram_frame
`define	AESL_BRAM_INST_frame bram_inst_frame
`define   AESL_DEPTH_init 1
`define AUTOTB_TVIN_inStream_V_data_V  "../tv/cdatafile/c.backsub.autotvin_inStream_V_data_V.dat"
`define AUTOTB_TVIN_inStream_V_keep_V  "../tv/cdatafile/c.backsub.autotvin_inStream_V_keep_V.dat"
`define AUTOTB_TVIN_inStream_V_strb_V  "../tv/cdatafile/c.backsub.autotvin_inStream_V_strb_V.dat"
`define AUTOTB_TVIN_inStream_V_user_V  "../tv/cdatafile/c.backsub.autotvin_inStream_V_user_V.dat"
`define AUTOTB_TVIN_inStream_V_last_V  "../tv/cdatafile/c.backsub.autotvin_inStream_V_last_V.dat"
`define AUTOTB_TVIN_inStream_V_id_V  "../tv/cdatafile/c.backsub.autotvin_inStream_V_id_V.dat"
`define AUTOTB_TVIN_inStream_V_dest_V  "../tv/cdatafile/c.backsub.autotvin_inStream_V_dest_V.dat"
`define AUTOTB_TVIN_outStream_V_data_V  "../tv/cdatafile/c.backsub.autotvin_outStream_V_data_V.dat"
`define AUTOTB_TVIN_outStream_V_keep_V  "../tv/cdatafile/c.backsub.autotvin_outStream_V_keep_V.dat"
`define AUTOTB_TVIN_outStream_V_strb_V  "../tv/cdatafile/c.backsub.autotvin_outStream_V_strb_V.dat"
`define AUTOTB_TVIN_outStream_V_user_V  "../tv/cdatafile/c.backsub.autotvin_outStream_V_user_V.dat"
`define AUTOTB_TVIN_outStream_V_last_V  "../tv/cdatafile/c.backsub.autotvin_outStream_V_last_V.dat"
`define AUTOTB_TVIN_outStream_V_id_V  "../tv/cdatafile/c.backsub.autotvin_outStream_V_id_V.dat"
`define AUTOTB_TVIN_outStream_V_dest_V  "../tv/cdatafile/c.backsub.autotvin_outStream_V_dest_V.dat"
`define AUTOTB_TVIN_frame  "../tv/cdatafile/c.backsub.autotvin_frame.dat"
`define AUTOTB_TVIN_init  "../tv/cdatafile/c.backsub.autotvin_init.dat"
`define AUTOTB_TVIN_inStream_V_data_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_inStream_V_data_V.dat"
`define AUTOTB_TVIN_inStream_V_keep_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_inStream_V_keep_V.dat"
`define AUTOTB_TVIN_inStream_V_strb_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_inStream_V_strb_V.dat"
`define AUTOTB_TVIN_inStream_V_user_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_inStream_V_user_V.dat"
`define AUTOTB_TVIN_inStream_V_last_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_inStream_V_last_V.dat"
`define AUTOTB_TVIN_inStream_V_id_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_inStream_V_id_V.dat"
`define AUTOTB_TVIN_inStream_V_dest_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_inStream_V_dest_V.dat"
`define AUTOTB_TVIN_outStream_V_data_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_outStream_V_data_V.dat"
`define AUTOTB_TVIN_outStream_V_keep_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_outStream_V_keep_V.dat"
`define AUTOTB_TVIN_outStream_V_strb_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_outStream_V_strb_V.dat"
`define AUTOTB_TVIN_outStream_V_user_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_outStream_V_user_V.dat"
`define AUTOTB_TVIN_outStream_V_last_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_outStream_V_last_V.dat"
`define AUTOTB_TVIN_outStream_V_id_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_outStream_V_id_V.dat"
`define AUTOTB_TVIN_outStream_V_dest_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_outStream_V_dest_V.dat"
`define AUTOTB_TVIN_frame_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_frame.dat"
`define AUTOTB_TVIN_init_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvin_init.dat"
`define AUTOTB_TVOUT_outStream_V_data_V  "../tv/cdatafile/c.backsub.autotvout_outStream_V_data_V.dat"
`define AUTOTB_TVOUT_outStream_V_keep_V  "../tv/cdatafile/c.backsub.autotvout_outStream_V_keep_V.dat"
`define AUTOTB_TVOUT_outStream_V_strb_V  "../tv/cdatafile/c.backsub.autotvout_outStream_V_strb_V.dat"
`define AUTOTB_TVOUT_outStream_V_user_V  "../tv/cdatafile/c.backsub.autotvout_outStream_V_user_V.dat"
`define AUTOTB_TVOUT_outStream_V_last_V  "../tv/cdatafile/c.backsub.autotvout_outStream_V_last_V.dat"
`define AUTOTB_TVOUT_outStream_V_id_V  "../tv/cdatafile/c.backsub.autotvout_outStream_V_id_V.dat"
`define AUTOTB_TVOUT_outStream_V_dest_V  "../tv/cdatafile/c.backsub.autotvout_outStream_V_dest_V.dat"
`define AUTOTB_TVOUT_frame  "../tv/cdatafile/c.backsub.autotvout_frame.dat"
`define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.backsub.autotvout_ap_return.dat"
`define AUTOTB_TVOUT_outStream_V_data_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_outStream_V_data_V.dat"
`define AUTOTB_TVOUT_outStream_V_keep_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_outStream_V_keep_V.dat"
`define AUTOTB_TVOUT_outStream_V_strb_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_outStream_V_strb_V.dat"
`define AUTOTB_TVOUT_outStream_V_user_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_outStream_V_user_V.dat"
`define AUTOTB_TVOUT_outStream_V_last_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_outStream_V_last_V.dat"
`define AUTOTB_TVOUT_outStream_V_id_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_outStream_V_id_V.dat"
`define AUTOTB_TVOUT_outStream_V_dest_V_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_outStream_V_dest_V.dat"
`define AUTOTB_TVOUT_frame_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_frame.dat"
`define AUTOTB_TVOUT_ap_return_out_wrapc  "../tv/rtldatafile/rtl.backsub.autotvout_ap_return.dat"

module `AUTOTB_TOP;

task read_token;
    input integer fp;
    output reg [199 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [18 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [18 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire [5 : 0] CRTL_BUS_AWADDR;
wire  CRTL_BUS_AWVALID;
wire  CRTL_BUS_AWREADY;
wire  CRTL_BUS_WVALID;
wire  CRTL_BUS_WREADY;
wire [31 : 0] CRTL_BUS_WDATA;
wire [3 : 0] CRTL_BUS_WSTRB;
wire [5 : 0] CRTL_BUS_ARADDR;
wire  CRTL_BUS_ARVALID;
wire  CRTL_BUS_ARREADY;
wire  CRTL_BUS_RVALID;
wire  CRTL_BUS_RREADY;
wire [31 : 0] CRTL_BUS_RDATA;
wire [1 : 0] CRTL_BUS_RRESP;
wire  CRTL_BUS_BVALID;
wire  CRTL_BUS_BREADY;
wire [1 : 0] CRTL_BUS_BRESP;
wire [31 : 0] inStream_TDATA;
wire  inStream_TVALID;
wire  inStream_TREADY;
wire [3 : 0] inStream_TKEEP;
wire [3 : 0] inStream_TSTRB;
wire [0 : 0] inStream_TUSER;
wire [0 : 0] inStream_TLAST;
wire [0 : 0] inStream_TID;
wire [0 : 0] inStream_TDEST;
wire [7 : 0] outStream_TDATA;
wire  outStream_TVALID;
wire  outStream_TREADY;
wire [0 : 0] outStream_TKEEP;
wire [0 : 0] outStream_TSTRB;
wire [0 : 0] outStream_TUSER;
wire [0 : 0] outStream_TLAST;
wire [0 : 0] outStream_TID;
wire [0 : 0] outStream_TDEST;
wire [31 : 0] frame_ADDR_A;
wire  frame_EN_A;
wire [1 : 0] frame_WEN_A;
wire [15 : 0] frame_DIN_A;
wire [15 : 0] frame_DOUT_A;
wire  frame_CLK_A;
wire  frame_RST_A;
wire [31 : 0] frame_ADDR_B;
wire  frame_EN_B;
wire [1 : 0] frame_WEN_B;
wire [15 : 0] frame_DIN_B;
wire [15 : 0] frame_DOUT_B;
wire  frame_CLK_B;
wire  frame_RST_B;
wire  interrupt;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire CRTL_BUS_read_data_finish;
wire CRTL_BUS_write_data_finish;
wire AESL_slave_start;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
	.s_axi_CRTL_BUS_AWADDR(CRTL_BUS_AWADDR),
	.s_axi_CRTL_BUS_AWVALID(CRTL_BUS_AWVALID),
	.s_axi_CRTL_BUS_AWREADY(CRTL_BUS_AWREADY),
	.s_axi_CRTL_BUS_WVALID(CRTL_BUS_WVALID),
	.s_axi_CRTL_BUS_WREADY(CRTL_BUS_WREADY),
	.s_axi_CRTL_BUS_WDATA(CRTL_BUS_WDATA),
	.s_axi_CRTL_BUS_WSTRB(CRTL_BUS_WSTRB),
	.s_axi_CRTL_BUS_ARADDR(CRTL_BUS_ARADDR),
	.s_axi_CRTL_BUS_ARVALID(CRTL_BUS_ARVALID),
	.s_axi_CRTL_BUS_ARREADY(CRTL_BUS_ARREADY),
	.s_axi_CRTL_BUS_RVALID(CRTL_BUS_RVALID),
	.s_axi_CRTL_BUS_RREADY(CRTL_BUS_RREADY),
	.s_axi_CRTL_BUS_RDATA(CRTL_BUS_RDATA),
	.s_axi_CRTL_BUS_RRESP(CRTL_BUS_RRESP),
	.s_axi_CRTL_BUS_BVALID(CRTL_BUS_BVALID),
	.s_axi_CRTL_BUS_BREADY(CRTL_BUS_BREADY),
	.s_axi_CRTL_BUS_BRESP(CRTL_BUS_BRESP),
	.ap_clk(ap_clk),
	.ap_rst_n(ap_rst_n),
	.inStream_TDATA(inStream_TDATA),
	.inStream_TVALID(inStream_TVALID),
	.inStream_TREADY(inStream_TREADY),
	.inStream_TKEEP(inStream_TKEEP),
	.inStream_TSTRB(inStream_TSTRB),
	.inStream_TUSER(inStream_TUSER),
	.inStream_TLAST(inStream_TLAST),
	.inStream_TID(inStream_TID),
	.inStream_TDEST(inStream_TDEST),
	.outStream_TDATA(outStream_TDATA),
	.outStream_TVALID(outStream_TVALID),
	.outStream_TREADY(outStream_TREADY),
	.outStream_TKEEP(outStream_TKEEP),
	.outStream_TSTRB(outStream_TSTRB),
	.outStream_TUSER(outStream_TUSER),
	.outStream_TLAST(outStream_TLAST),
	.outStream_TID(outStream_TID),
	.outStream_TDEST(outStream_TDEST),
	.frame_Addr_A(frame_ADDR_A),
	.frame_EN_A(frame_EN_A),
	.frame_WEN_A(frame_WEN_A),
	.frame_Din_A(frame_DIN_A),
	.frame_Dout_A(frame_DOUT_A),
	.frame_Clk_A(frame_CLK_A),
	.frame_Rst_A(frame_RST_A),
	.frame_Addr_B(frame_ADDR_B),
	.frame_EN_B(frame_EN_B),
	.frame_WEN_B(frame_WEN_B),
	.frame_Din_B(frame_DIN_B),
	.frame_Dout_B(frame_DOUT_B),
	.frame_Clk_B(frame_CLK_B),
	.frame_Rst_B(frame_RST_B),
	.interrupt(interrupt));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst_n = AESL_reset;
assign ap_rst_n_n = ~AESL_reset;
assign AESL_reset = rst;
assign AESL_start = start;
assign AESL_ce = ce;
assign AESL_continue = continue;
  assign AESL_slave_write_start_in = slave_start_status  & CRTL_BUS_write_data_finish;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_done = slave_done_status  & CRTL_BUS_read_data_finish;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_output_done == 1 ) begin
        slave_done_status <= 1;
    end
end














//------------------------bramframe Instantiation--------------

// The input and output of bramframe
wire  bramframe_Clk_A, bramframe_Clk_B;
wire  bramframe_EN_A, bramframe_EN_B;
wire  [2 - 1 : 0] bramframe_WEN_A, bramframe_WEN_B;
wire    [31 : 0]	bramframe_Addr_A, bramframe_Addr_B;
wire	[15 : 0]	bramframe_Din_A, bramframe_Din_B;
wire    [15 : 0]	bramframe_Dout_A, bramframe_Dout_B;
wire	bramframe_ready;
wire	bramframe_done;

`AESL_BRAM_frame `AESL_BRAM_INST_frame(
    .Clk_A    (bramframe_Clk_A),
    .Rst_A    (bramframe_Rst_A),
    .EN_A     (bramframe_EN_A),
    .WEN_A    (bramframe_WEN_A),
    .Addr_A   (bramframe_Addr_A),
    .Din_A    (bramframe_Din_A),
    .Dout_A   (bramframe_Dout_A),
    .Clk_B    (bramframe_Clk_B),
    .Rst_B    (bramframe_Rst_B),
    .EN_B     (bramframe_EN_B),
    .WEN_B    (bramframe_WEN_B),
    .Addr_B   (bramframe_Addr_B),
    .Din_B    (bramframe_Din_B),
    .Dout_B   (bramframe_Dout_B),
    .ready	(bramframe_ready),
    .done	    (bramframe_done)
);

// Assignment between dut and bramframe
assign bramframe_Clk_A = frame_CLK_A;
assign bramframe_Rst_A = frame_RST_A;
assign bramframe_Addr_A = frame_ADDR_A;
assign bramframe_EN_A = frame_EN_A;
assign frame_DOUT_A = bramframe_Dout_A;
assign bramframe_WEN_A = frame_WEN_A;
assign bramframe_Din_A = frame_DIN_A;
assign bramframe_Clk_B = frame_CLK_B;
assign bramframe_Rst_B = frame_RST_B;
assign bramframe_Addr_B = frame_ADDR_B;
assign bramframe_EN_B = frame_EN_B;
assign frame_DOUT_B = bramframe_Dout_B;
assign bramframe_WEN_B = frame_WEN_B;
assign bramframe_Din_B = frame_DIN_B;
assign bramframe_ready= ready;
assign bramframe_done = interface_done;



reg [31:0] ap_c_n_tvin_trans_num_inStream_V_data_V;
reg [31:0] ap_c_n_tvin_trans_num_inStream_V_keep_V;
reg [31:0] ap_c_n_tvin_trans_num_inStream_V_strb_V;
reg [31:0] ap_c_n_tvin_trans_num_inStream_V_user_V;
reg [31:0] ap_c_n_tvin_trans_num_inStream_V_last_V;
reg [31:0] ap_c_n_tvin_trans_num_inStream_V_id_V;
reg [31:0] ap_c_n_tvin_trans_num_inStream_V_dest_V;
reg inStream_ready_reg; // for self-sync

wire inStream_ready;
wire inStream_done;
wire [31:0] inStream_transaction;
wire axi_s_inStream_TVALID;
wire axi_s_inStream_TREADY;

AESL_axi_s_inStream AESL_AXI_S_inStream(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_inStream_TDATA(inStream_TDATA),
	.TRAN_inStream_TKEEP(inStream_TKEEP),
	.TRAN_inStream_TSTRB(inStream_TSTRB),
	.TRAN_inStream_TUSER(inStream_TUSER),
	.TRAN_inStream_TLAST(inStream_TLAST),
	.TRAN_inStream_TID(inStream_TID),
	.TRAN_inStream_TDEST(inStream_TDEST),
	.TRAN_inStream_TVALID(axi_s_inStream_TVALID),
	.TRAN_inStream_TREADY(axi_s_inStream_TREADY),
	.ready(inStream_ready),
	.done(inStream_done),
	.transaction(inStream_transaction));

assign inStream_ready = inStream_ready_reg | ready_initial;
assign inStream_done = 0;

reg reg_inStream_TVALID;
initial begin : gen_reg_inStream_TVALID_process
	integer rand;
	reg_inStream_TVALID = axi_s_inStream_TVALID;
	while (1) begin
		@ (axi_s_inStream_TVALID);
		reg_inStream_TVALID = axi_s_inStream_TVALID;
	end
end


assign inStream_TVALID = reg_inStream_TVALID;

assign axi_s_inStream_TREADY = inStream_TREADY;
reg [31:0] ap_c_n_tvin_trans_num_outStream_V_data_V;
reg [31:0] ap_c_n_tvin_trans_num_outStream_V_keep_V;
reg [31:0] ap_c_n_tvin_trans_num_outStream_V_strb_V;
reg [31:0] ap_c_n_tvin_trans_num_outStream_V_user_V;
reg [31:0] ap_c_n_tvin_trans_num_outStream_V_last_V;
reg [31:0] ap_c_n_tvin_trans_num_outStream_V_id_V;
reg [31:0] ap_c_n_tvin_trans_num_outStream_V_dest_V;
reg outStream_ready_reg; // for self-sync

wire outStream_ready;
wire outStream_done;
wire [31:0] outStream_transaction;
wire axi_s_outStream_TVALID;
wire axi_s_outStream_TREADY;

AESL_axi_s_outStream AESL_AXI_S_outStream(
	.clk(AESL_clock),
	.reset(AESL_reset),
	.TRAN_outStream_TDATA(outStream_TDATA),
	.TRAN_outStream_TKEEP(outStream_TKEEP),
	.TRAN_outStream_TSTRB(outStream_TSTRB),
	.TRAN_outStream_TUSER(outStream_TUSER),
	.TRAN_outStream_TLAST(outStream_TLAST),
	.TRAN_outStream_TID(outStream_TID),
	.TRAN_outStream_TDEST(outStream_TDEST),
	.TRAN_outStream_TVALID(axi_s_outStream_TVALID),
	.TRAN_outStream_TREADY(axi_s_outStream_TREADY),
	.ready(outStream_ready),
	.done(outStream_done),
	.transaction(outStream_transaction));

assign outStream_ready = 0;
assign outStream_done = AESL_done;

assign axi_s_outStream_TVALID = outStream_TVALID;

reg reg_outStream_TREADY;
initial begin : gen_reg_outStream_TREADY_process
    integer rand;
    reg_outStream_TREADY = 0;
    while(1)
    begin
        @(axi_s_outStream_TREADY);
        reg_outStream_TREADY = axi_s_outStream_TREADY;
    end
end


assign outStream_TREADY = reg_outStream_TREADY;

AESL_axi_slave_CRTL_BUS AESL_AXI_SLAVE_CRTL_BUS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_CRTL_BUS_AWADDR (CRTL_BUS_AWADDR),
    .TRAN_s_axi_CRTL_BUS_AWVALID (CRTL_BUS_AWVALID),
    .TRAN_s_axi_CRTL_BUS_AWREADY (CRTL_BUS_AWREADY),
    .TRAN_s_axi_CRTL_BUS_WVALID (CRTL_BUS_WVALID),
    .TRAN_s_axi_CRTL_BUS_WREADY (CRTL_BUS_WREADY),
    .TRAN_s_axi_CRTL_BUS_WDATA (CRTL_BUS_WDATA),
    .TRAN_s_axi_CRTL_BUS_WSTRB (CRTL_BUS_WSTRB),
    .TRAN_s_axi_CRTL_BUS_ARADDR (CRTL_BUS_ARADDR),
    .TRAN_s_axi_CRTL_BUS_ARVALID (CRTL_BUS_ARVALID),
    .TRAN_s_axi_CRTL_BUS_ARREADY (CRTL_BUS_ARREADY),
    .TRAN_s_axi_CRTL_BUS_RVALID (CRTL_BUS_RVALID),
    .TRAN_s_axi_CRTL_BUS_RREADY (CRTL_BUS_RREADY),
    .TRAN_s_axi_CRTL_BUS_RDATA (CRTL_BUS_RDATA),
    .TRAN_s_axi_CRTL_BUS_RRESP (CRTL_BUS_RRESP),
    .TRAN_s_axi_CRTL_BUS_BVALID (CRTL_BUS_BVALID),
    .TRAN_s_axi_CRTL_BUS_BREADY (CRTL_BUS_BREADY),
    .TRAN_s_axi_CRTL_BUS_BRESP (CRTL_BUS_BRESP),
    .TRAN_CRTL_BUS_read_data_finish(CRTL_BUS_read_data_finish),
    .TRAN_CRTL_BUS_write_data_finish(CRTL_BUS_write_data_finish),
    .TRAN_CRTL_BUS_ready_out (AESL_ready),
    .TRAN_CRTL_BUS_ready_in (AESL_slave_ready),
    .TRAN_CRTL_BUS_done_out (AESL_slave_output_done),
    .TRAN_CRTL_BUS_idle_out (AESL_idle),
    .TRAN_CRTL_BUS_write_start_in     (AESL_slave_write_start_in),
    .TRAN_CRTL_BUS_write_start_finish (AESL_slave_write_start_finish),
    .TRAN_CRTL_BUS_transaction_done_in (AESL_done_delay),
    .TRAN_CRTL_BUS_interrupt  (interrupt),
    .TRAN_CRTL_BUS_start_in  (AESL_slave_start)
);


reg dump_tvout_finish_ap_return;

initial begin : dump_tvout_runtime_sign_ap_return
	integer fp;
	dump_tvout_finish_ap_return = 0;
	fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_ap_return = 1;
end

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

	event next_trigger_ready_cnt;
	
	initial begin : gen_ready_cnt
		ready_cnt = 0;
		wait (AESL_reset === 1);
		forever begin
			@ (posedge AESL_clock);
			if (ready == 1) begin
				if (ready_cnt < `AUTOTB_TRANSACTION_NUM) begin
					ready_cnt = ready_cnt + 1;
				end
			end
			-> next_trigger_ready_cnt;
		end
	end
	
	wire all_finish = (done_cnt == `AUTOTB_TRANSACTION_NUM);
	
	// done_cnt
	always @ (posedge AESL_clock) begin
		if (~AESL_reset) begin
			done_cnt <= 0;
		end else begin
			if (AESL_done == 1) begin
				if (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
					done_cnt <= done_cnt + 1;
				end
			end
		end
	end
	
	initial begin : finish_simulation
		wait (all_finish == 1);
		// last transaction is saved at negedge right after last done
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		$finish;
	end
	
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_inStream_V_data_V;
reg [31:0] size_inStream_V_data_V;
reg end_inStream_V_keep_V;
reg [31:0] size_inStream_V_keep_V;
reg end_inStream_V_strb_V;
reg [31:0] size_inStream_V_strb_V;
reg end_inStream_V_user_V;
reg [31:0] size_inStream_V_user_V;
reg end_inStream_V_last_V;
reg [31:0] size_inStream_V_last_V;
reg end_inStream_V_id_V;
reg [31:0] size_inStream_V_id_V;
reg end_inStream_V_dest_V;
reg [31:0] size_inStream_V_dest_V;
reg end_outStream_V_data_V;
reg [31:0] size_outStream_V_data_V;
reg end_outStream_V_keep_V;
reg [31:0] size_outStream_V_keep_V;
reg end_outStream_V_strb_V;
reg [31:0] size_outStream_V_strb_V;
reg end_outStream_V_user_V;
reg [31:0] size_outStream_V_user_V;
reg end_outStream_V_last_V;
reg [31:0] size_outStream_V_last_V;
reg end_outStream_V_id_V;
reg [31:0] size_outStream_V_id_V;
reg end_outStream_V_dest_V;
reg [31:0] size_outStream_V_dest_V;
reg end_frame;
reg [31:0] size_frame;
reg end_init;
reg [31:0] size_init;
reg end_ap_return;
reg [31:0] size_ap_return;

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
	integer rand;
	start = 0;
	ce = 1;
	wait (AESL_reset === 1);
	@ (posedge AESL_clock);
	start = 1;
	while (ready_cnt < `AUTOTB_TRANSACTION_NUM + 1) begin
		@ (posedge AESL_clock);
	end
	start = 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
	
	initial begin : proc_gen_axis_internal_ready_inStream
		inStream_ready_reg = 0;
		@ (posedge ready_initial);
		forever begin
			@ (ap_c_n_tvin_trans_num_inStream_V_data_V or inStream_transaction);
			if (ap_c_n_tvin_trans_num_inStream_V_data_V > inStream_transaction) begin
				inStream_ready_reg = 1;
			end else begin
				inStream_ready_reg = 0;
			end
		end
	end
	`define STREAM_SIZE_IN_inStream_V_data_V "../tv/stream_size/stream_size_in_inStream_V_data_V.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inStream_V_data_V
		integer fp_inStream_V_data_V;
		reg [127:0] token_inStream_V_data_V;
		integer ret;
		
		ap_c_n_tvin_trans_num_inStream_V_data_V = 0;
		end_inStream_V_data_V = 0;
		wait (AESL_reset === 1);
		
		fp_inStream_V_data_V = $fopen(`STREAM_SIZE_IN_inStream_V_data_V, "r");
		if(fp_inStream_V_data_V == 0) begin
			$display("Failed to open file \"%s\"!", `STREAM_SIZE_IN_inStream_V_data_V);
			$finish;
		end
		read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be [[[runtime]]]
		if (token_inStream_V_data_V != "[[[runtime]]]") begin
			$display("ERROR: token_inStream_V_data_V != \"[[[runtime]]]\"");
			$finish;
		end
		size_inStream_V_data_V = 0;
		while (size_inStream_V_data_V == 0 && end_inStream_V_data_V == 0) begin
			ap_c_n_tvin_trans_num_inStream_V_data_V = ap_c_n_tvin_trans_num_inStream_V_data_V + 1;
			read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be [[transaction]] or [[[/runtime]]]
			if (token_inStream_V_data_V == "[[transaction]]") begin
				read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be transaction number
				read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be size for hls::stream
				ret = $sscanf(token_inStream_V_data_V, "%d", size_inStream_V_data_V);
				read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be [[/transaction]]
			end else if (token_inStream_V_data_V == "[[[/runtime]]]") begin
				$fclose(fp_inStream_V_data_V);
				end_inStream_V_data_V = 1;
			end else begin
				$display("ERROR: unknown token_inStream_V_data_V");
				$finish;
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inStream_V_data_V == 0) begin
				if (inStream_TREADY == 1) begin
					if (size_inStream_V_data_V > 0) begin
						size_inStream_V_data_V = size_inStream_V_data_V - 1;
						while (size_inStream_V_data_V == 0 && end_inStream_V_data_V == 0) begin
							ap_c_n_tvin_trans_num_inStream_V_data_V = ap_c_n_tvin_trans_num_inStream_V_data_V + 1;
							read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be [[transaction]] or [[[/runtime]]]
							if (token_inStream_V_data_V == "[[transaction]]") begin
								read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be transaction number
								read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be size for hls::stream
								ret = $sscanf(token_inStream_V_data_V, "%d", size_inStream_V_data_V);
								read_token(fp_inStream_V_data_V, token_inStream_V_data_V); // should be [[/transaction]]
							end else if (token_inStream_V_data_V == "[[[/runtime]]]") begin
								$fclose(fp_inStream_V_data_V);
								end_inStream_V_data_V = 1;
							end else begin
								$display("ERROR: unknown token_inStream_V_data_V");
								$finish;
							end
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inStream_V_data_V = ap_c_n_tvin_trans_num_inStream_V_data_V + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_inStream_V_keep_V "../tv/stream_size/stream_size_in_inStream_V_keep_V.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inStream_V_keep_V
		integer fp_inStream_V_keep_V;
		reg [127:0] token_inStream_V_keep_V;
		integer ret;
		
		ap_c_n_tvin_trans_num_inStream_V_keep_V = 0;
		end_inStream_V_keep_V = 0;
		wait (AESL_reset === 1);
		
		fp_inStream_V_keep_V = $fopen(`STREAM_SIZE_IN_inStream_V_keep_V, "r");
		if(fp_inStream_V_keep_V == 0) begin
			$display("Failed to open file \"%s\"!", `STREAM_SIZE_IN_inStream_V_keep_V);
			$finish;
		end
		read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be [[[runtime]]]
		if (token_inStream_V_keep_V != "[[[runtime]]]") begin
			$display("ERROR: token_inStream_V_keep_V != \"[[[runtime]]]\"");
			$finish;
		end
		size_inStream_V_keep_V = 0;
		while (size_inStream_V_keep_V == 0 && end_inStream_V_keep_V == 0) begin
			ap_c_n_tvin_trans_num_inStream_V_keep_V = ap_c_n_tvin_trans_num_inStream_V_keep_V + 1;
			read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be [[transaction]] or [[[/runtime]]]
			if (token_inStream_V_keep_V == "[[transaction]]") begin
				read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be transaction number
				read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be size for hls::stream
				ret = $sscanf(token_inStream_V_keep_V, "%d", size_inStream_V_keep_V);
				read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be [[/transaction]]
			end else if (token_inStream_V_keep_V == "[[[/runtime]]]") begin
				$fclose(fp_inStream_V_keep_V);
				end_inStream_V_keep_V = 1;
			end else begin
				$display("ERROR: unknown token_inStream_V_keep_V");
				$finish;
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inStream_V_keep_V == 0) begin
				if (inStream_TREADY == 1) begin
					if (size_inStream_V_keep_V > 0) begin
						size_inStream_V_keep_V = size_inStream_V_keep_V - 1;
						while (size_inStream_V_keep_V == 0 && end_inStream_V_keep_V == 0) begin
							ap_c_n_tvin_trans_num_inStream_V_keep_V = ap_c_n_tvin_trans_num_inStream_V_keep_V + 1;
							read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be [[transaction]] or [[[/runtime]]]
							if (token_inStream_V_keep_V == "[[transaction]]") begin
								read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be transaction number
								read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be size for hls::stream
								ret = $sscanf(token_inStream_V_keep_V, "%d", size_inStream_V_keep_V);
								read_token(fp_inStream_V_keep_V, token_inStream_V_keep_V); // should be [[/transaction]]
							end else if (token_inStream_V_keep_V == "[[[/runtime]]]") begin
								$fclose(fp_inStream_V_keep_V);
								end_inStream_V_keep_V = 1;
							end else begin
								$display("ERROR: unknown token_inStream_V_keep_V");
								$finish;
							end
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inStream_V_keep_V = ap_c_n_tvin_trans_num_inStream_V_keep_V + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_inStream_V_strb_V "../tv/stream_size/stream_size_in_inStream_V_strb_V.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inStream_V_strb_V
		integer fp_inStream_V_strb_V;
		reg [127:0] token_inStream_V_strb_V;
		integer ret;
		
		ap_c_n_tvin_trans_num_inStream_V_strb_V = 0;
		end_inStream_V_strb_V = 0;
		wait (AESL_reset === 1);
		
		fp_inStream_V_strb_V = $fopen(`STREAM_SIZE_IN_inStream_V_strb_V, "r");
		if(fp_inStream_V_strb_V == 0) begin
			$display("Failed to open file \"%s\"!", `STREAM_SIZE_IN_inStream_V_strb_V);
			$finish;
		end
		read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be [[[runtime]]]
		if (token_inStream_V_strb_V != "[[[runtime]]]") begin
			$display("ERROR: token_inStream_V_strb_V != \"[[[runtime]]]\"");
			$finish;
		end
		size_inStream_V_strb_V = 0;
		while (size_inStream_V_strb_V == 0 && end_inStream_V_strb_V == 0) begin
			ap_c_n_tvin_trans_num_inStream_V_strb_V = ap_c_n_tvin_trans_num_inStream_V_strb_V + 1;
			read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be [[transaction]] or [[[/runtime]]]
			if (token_inStream_V_strb_V == "[[transaction]]") begin
				read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be transaction number
				read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be size for hls::stream
				ret = $sscanf(token_inStream_V_strb_V, "%d", size_inStream_V_strb_V);
				read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be [[/transaction]]
			end else if (token_inStream_V_strb_V == "[[[/runtime]]]") begin
				$fclose(fp_inStream_V_strb_V);
				end_inStream_V_strb_V = 1;
			end else begin
				$display("ERROR: unknown token_inStream_V_strb_V");
				$finish;
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inStream_V_strb_V == 0) begin
				if (inStream_TREADY == 1) begin
					if (size_inStream_V_strb_V > 0) begin
						size_inStream_V_strb_V = size_inStream_V_strb_V - 1;
						while (size_inStream_V_strb_V == 0 && end_inStream_V_strb_V == 0) begin
							ap_c_n_tvin_trans_num_inStream_V_strb_V = ap_c_n_tvin_trans_num_inStream_V_strb_V + 1;
							read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be [[transaction]] or [[[/runtime]]]
							if (token_inStream_V_strb_V == "[[transaction]]") begin
								read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be transaction number
								read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be size for hls::stream
								ret = $sscanf(token_inStream_V_strb_V, "%d", size_inStream_V_strb_V);
								read_token(fp_inStream_V_strb_V, token_inStream_V_strb_V); // should be [[/transaction]]
							end else if (token_inStream_V_strb_V == "[[[/runtime]]]") begin
								$fclose(fp_inStream_V_strb_V);
								end_inStream_V_strb_V = 1;
							end else begin
								$display("ERROR: unknown token_inStream_V_strb_V");
								$finish;
							end
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inStream_V_strb_V = ap_c_n_tvin_trans_num_inStream_V_strb_V + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_inStream_V_user_V "../tv/stream_size/stream_size_in_inStream_V_user_V.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inStream_V_user_V
		integer fp_inStream_V_user_V;
		reg [127:0] token_inStream_V_user_V;
		integer ret;
		
		ap_c_n_tvin_trans_num_inStream_V_user_V = 0;
		end_inStream_V_user_V = 0;
		wait (AESL_reset === 1);
		
		fp_inStream_V_user_V = $fopen(`STREAM_SIZE_IN_inStream_V_user_V, "r");
		if(fp_inStream_V_user_V == 0) begin
			$display("Failed to open file \"%s\"!", `STREAM_SIZE_IN_inStream_V_user_V);
			$finish;
		end
		read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be [[[runtime]]]
		if (token_inStream_V_user_V != "[[[runtime]]]") begin
			$display("ERROR: token_inStream_V_user_V != \"[[[runtime]]]\"");
			$finish;
		end
		size_inStream_V_user_V = 0;
		while (size_inStream_V_user_V == 0 && end_inStream_V_user_V == 0) begin
			ap_c_n_tvin_trans_num_inStream_V_user_V = ap_c_n_tvin_trans_num_inStream_V_user_V + 1;
			read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be [[transaction]] or [[[/runtime]]]
			if (token_inStream_V_user_V == "[[transaction]]") begin
				read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be transaction number
				read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be size for hls::stream
				ret = $sscanf(token_inStream_V_user_V, "%d", size_inStream_V_user_V);
				read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be [[/transaction]]
			end else if (token_inStream_V_user_V == "[[[/runtime]]]") begin
				$fclose(fp_inStream_V_user_V);
				end_inStream_V_user_V = 1;
			end else begin
				$display("ERROR: unknown token_inStream_V_user_V");
				$finish;
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inStream_V_user_V == 0) begin
				if (inStream_TREADY == 1) begin
					if (size_inStream_V_user_V > 0) begin
						size_inStream_V_user_V = size_inStream_V_user_V - 1;
						while (size_inStream_V_user_V == 0 && end_inStream_V_user_V == 0) begin
							ap_c_n_tvin_trans_num_inStream_V_user_V = ap_c_n_tvin_trans_num_inStream_V_user_V + 1;
							read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be [[transaction]] or [[[/runtime]]]
							if (token_inStream_V_user_V == "[[transaction]]") begin
								read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be transaction number
								read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be size for hls::stream
								ret = $sscanf(token_inStream_V_user_V, "%d", size_inStream_V_user_V);
								read_token(fp_inStream_V_user_V, token_inStream_V_user_V); // should be [[/transaction]]
							end else if (token_inStream_V_user_V == "[[[/runtime]]]") begin
								$fclose(fp_inStream_V_user_V);
								end_inStream_V_user_V = 1;
							end else begin
								$display("ERROR: unknown token_inStream_V_user_V");
								$finish;
							end
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inStream_V_user_V = ap_c_n_tvin_trans_num_inStream_V_user_V + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_inStream_V_last_V "../tv/stream_size/stream_size_in_inStream_V_last_V.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inStream_V_last_V
		integer fp_inStream_V_last_V;
		reg [127:0] token_inStream_V_last_V;
		integer ret;
		
		ap_c_n_tvin_trans_num_inStream_V_last_V = 0;
		end_inStream_V_last_V = 0;
		wait (AESL_reset === 1);
		
		fp_inStream_V_last_V = $fopen(`STREAM_SIZE_IN_inStream_V_last_V, "r");
		if(fp_inStream_V_last_V == 0) begin
			$display("Failed to open file \"%s\"!", `STREAM_SIZE_IN_inStream_V_last_V);
			$finish;
		end
		read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be [[[runtime]]]
		if (token_inStream_V_last_V != "[[[runtime]]]") begin
			$display("ERROR: token_inStream_V_last_V != \"[[[runtime]]]\"");
			$finish;
		end
		size_inStream_V_last_V = 0;
		while (size_inStream_V_last_V == 0 && end_inStream_V_last_V == 0) begin
			ap_c_n_tvin_trans_num_inStream_V_last_V = ap_c_n_tvin_trans_num_inStream_V_last_V + 1;
			read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be [[transaction]] or [[[/runtime]]]
			if (token_inStream_V_last_V == "[[transaction]]") begin
				read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be transaction number
				read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be size for hls::stream
				ret = $sscanf(token_inStream_V_last_V, "%d", size_inStream_V_last_V);
				read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be [[/transaction]]
			end else if (token_inStream_V_last_V == "[[[/runtime]]]") begin
				$fclose(fp_inStream_V_last_V);
				end_inStream_V_last_V = 1;
			end else begin
				$display("ERROR: unknown token_inStream_V_last_V");
				$finish;
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inStream_V_last_V == 0) begin
				if (inStream_TREADY == 1) begin
					if (size_inStream_V_last_V > 0) begin
						size_inStream_V_last_V = size_inStream_V_last_V - 1;
						while (size_inStream_V_last_V == 0 && end_inStream_V_last_V == 0) begin
							ap_c_n_tvin_trans_num_inStream_V_last_V = ap_c_n_tvin_trans_num_inStream_V_last_V + 1;
							read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be [[transaction]] or [[[/runtime]]]
							if (token_inStream_V_last_V == "[[transaction]]") begin
								read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be transaction number
								read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be size for hls::stream
								ret = $sscanf(token_inStream_V_last_V, "%d", size_inStream_V_last_V);
								read_token(fp_inStream_V_last_V, token_inStream_V_last_V); // should be [[/transaction]]
							end else if (token_inStream_V_last_V == "[[[/runtime]]]") begin
								$fclose(fp_inStream_V_last_V);
								end_inStream_V_last_V = 1;
							end else begin
								$display("ERROR: unknown token_inStream_V_last_V");
								$finish;
							end
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inStream_V_last_V = ap_c_n_tvin_trans_num_inStream_V_last_V + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_inStream_V_id_V "../tv/stream_size/stream_size_in_inStream_V_id_V.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inStream_V_id_V
		integer fp_inStream_V_id_V;
		reg [127:0] token_inStream_V_id_V;
		integer ret;
		
		ap_c_n_tvin_trans_num_inStream_V_id_V = 0;
		end_inStream_V_id_V = 0;
		wait (AESL_reset === 1);
		
		fp_inStream_V_id_V = $fopen(`STREAM_SIZE_IN_inStream_V_id_V, "r");
		if(fp_inStream_V_id_V == 0) begin
			$display("Failed to open file \"%s\"!", `STREAM_SIZE_IN_inStream_V_id_V);
			$finish;
		end
		read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be [[[runtime]]]
		if (token_inStream_V_id_V != "[[[runtime]]]") begin
			$display("ERROR: token_inStream_V_id_V != \"[[[runtime]]]\"");
			$finish;
		end
		size_inStream_V_id_V = 0;
		while (size_inStream_V_id_V == 0 && end_inStream_V_id_V == 0) begin
			ap_c_n_tvin_trans_num_inStream_V_id_V = ap_c_n_tvin_trans_num_inStream_V_id_V + 1;
			read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be [[transaction]] or [[[/runtime]]]
			if (token_inStream_V_id_V == "[[transaction]]") begin
				read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be transaction number
				read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be size for hls::stream
				ret = $sscanf(token_inStream_V_id_V, "%d", size_inStream_V_id_V);
				read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be [[/transaction]]
			end else if (token_inStream_V_id_V == "[[[/runtime]]]") begin
				$fclose(fp_inStream_V_id_V);
				end_inStream_V_id_V = 1;
			end else begin
				$display("ERROR: unknown token_inStream_V_id_V");
				$finish;
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inStream_V_id_V == 0) begin
				if (inStream_TREADY == 1) begin
					if (size_inStream_V_id_V > 0) begin
						size_inStream_V_id_V = size_inStream_V_id_V - 1;
						while (size_inStream_V_id_V == 0 && end_inStream_V_id_V == 0) begin
							ap_c_n_tvin_trans_num_inStream_V_id_V = ap_c_n_tvin_trans_num_inStream_V_id_V + 1;
							read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be [[transaction]] or [[[/runtime]]]
							if (token_inStream_V_id_V == "[[transaction]]") begin
								read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be transaction number
								read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be size for hls::stream
								ret = $sscanf(token_inStream_V_id_V, "%d", size_inStream_V_id_V);
								read_token(fp_inStream_V_id_V, token_inStream_V_id_V); // should be [[/transaction]]
							end else if (token_inStream_V_id_V == "[[[/runtime]]]") begin
								$fclose(fp_inStream_V_id_V);
								end_inStream_V_id_V = 1;
							end else begin
								$display("ERROR: unknown token_inStream_V_id_V");
								$finish;
							end
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inStream_V_id_V = ap_c_n_tvin_trans_num_inStream_V_id_V + 1;
			end
		end
	end
	
	`define STREAM_SIZE_IN_inStream_V_dest_V "../tv/stream_size/stream_size_in_inStream_V_dest_V.dat"
	
	initial begin : gen_ap_c_n_tvin_trans_num_inStream_V_dest_V
		integer fp_inStream_V_dest_V;
		reg [127:0] token_inStream_V_dest_V;
		integer ret;
		
		ap_c_n_tvin_trans_num_inStream_V_dest_V = 0;
		end_inStream_V_dest_V = 0;
		wait (AESL_reset === 1);
		
		fp_inStream_V_dest_V = $fopen(`STREAM_SIZE_IN_inStream_V_dest_V, "r");
		if(fp_inStream_V_dest_V == 0) begin
			$display("Failed to open file \"%s\"!", `STREAM_SIZE_IN_inStream_V_dest_V);
			$finish;
		end
		read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be [[[runtime]]]
		if (token_inStream_V_dest_V != "[[[runtime]]]") begin
			$display("ERROR: token_inStream_V_dest_V != \"[[[runtime]]]\"");
			$finish;
		end
		size_inStream_V_dest_V = 0;
		while (size_inStream_V_dest_V == 0 && end_inStream_V_dest_V == 0) begin
			ap_c_n_tvin_trans_num_inStream_V_dest_V = ap_c_n_tvin_trans_num_inStream_V_dest_V + 1;
			read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be [[transaction]] or [[[/runtime]]]
			if (token_inStream_V_dest_V == "[[transaction]]") begin
				read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be transaction number
				read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be size for hls::stream
				ret = $sscanf(token_inStream_V_dest_V, "%d", size_inStream_V_dest_V);
				read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be [[/transaction]]
			end else if (token_inStream_V_dest_V == "[[[/runtime]]]") begin
				$fclose(fp_inStream_V_dest_V);
				end_inStream_V_dest_V = 1;
			end else begin
				$display("ERROR: unknown token_inStream_V_dest_V");
				$finish;
			end
		end
		forever begin
			@ (posedge AESL_clock);
			if (end_inStream_V_dest_V == 0) begin
				if (inStream_TREADY == 1) begin
					if (size_inStream_V_dest_V > 0) begin
						size_inStream_V_dest_V = size_inStream_V_dest_V - 1;
						while (size_inStream_V_dest_V == 0 && end_inStream_V_dest_V == 0) begin
							ap_c_n_tvin_trans_num_inStream_V_dest_V = ap_c_n_tvin_trans_num_inStream_V_dest_V + 1;
							read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be [[transaction]] or [[[/runtime]]]
							if (token_inStream_V_dest_V == "[[transaction]]") begin
								read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be transaction number
								read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be size for hls::stream
								ret = $sscanf(token_inStream_V_dest_V, "%d", size_inStream_V_dest_V);
								read_token(fp_inStream_V_dest_V, token_inStream_V_dest_V); // should be [[/transaction]]
							end else if (token_inStream_V_dest_V == "[[[/runtime]]]") begin
								$fclose(fp_inStream_V_dest_V);
								end_inStream_V_dest_V = 1;
							end else begin
								$display("ERROR: unknown token_inStream_V_dest_V");
								$finish;
							end
						end
					end
				end
			end else begin
				ap_c_n_tvin_trans_num_inStream_V_dest_V = ap_c_n_tvin_trans_num_inStream_V_dest_V + 1;
			end
		end
	end
	

reg dump_tvout_finish_outStream_V_data_V;

initial begin : dump_tvout_runtime_sign_outStream_V_data_V
	integer fp;
	dump_tvout_finish_outStream_V_data_V = 0;
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_data_V_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_data_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_data_V_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_data_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outStream_V_data_V = 1;
end


reg dump_tvout_finish_outStream_V_keep_V;

initial begin : dump_tvout_runtime_sign_outStream_V_keep_V
	integer fp;
	dump_tvout_finish_outStream_V_keep_V = 0;
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_keep_V_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_keep_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_keep_V_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_keep_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outStream_V_keep_V = 1;
end


reg dump_tvout_finish_outStream_V_strb_V;

initial begin : dump_tvout_runtime_sign_outStream_V_strb_V
	integer fp;
	dump_tvout_finish_outStream_V_strb_V = 0;
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_strb_V_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_strb_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_strb_V_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_strb_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outStream_V_strb_V = 1;
end


reg dump_tvout_finish_outStream_V_user_V;

initial begin : dump_tvout_runtime_sign_outStream_V_user_V
	integer fp;
	dump_tvout_finish_outStream_V_user_V = 0;
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_user_V_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_user_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_user_V_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_user_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outStream_V_user_V = 1;
end


reg dump_tvout_finish_outStream_V_last_V;

initial begin : dump_tvout_runtime_sign_outStream_V_last_V
	integer fp;
	dump_tvout_finish_outStream_V_last_V = 0;
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_last_V_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_last_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_last_V_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_last_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outStream_V_last_V = 1;
end


reg dump_tvout_finish_outStream_V_id_V;

initial begin : dump_tvout_runtime_sign_outStream_V_id_V
	integer fp;
	dump_tvout_finish_outStream_V_id_V = 0;
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_id_V_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_id_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_id_V_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_id_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outStream_V_id_V = 1;
end


reg dump_tvout_finish_outStream_V_dest_V;

initial begin : dump_tvout_runtime_sign_outStream_V_dest_V
	integer fp;
	dump_tvout_finish_outStream_V_dest_V = 0;
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_dest_V_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_dest_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_outStream_V_dest_V_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_outStream_V_dest_V_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_outStream_V_dest_V = 1;
end


reg dump_tvout_finish_frame;

initial begin : dump_tvout_runtime_sign_frame
	integer fp;
	dump_tvout_finish_frame = 0;
	fp = $fopen(`AUTOTB_TVOUT_frame_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_frame_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_frame_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_frame_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_frame = 1;
end

always @ (negedge AESL_clock) begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterOut_addr = 0;
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
		AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
	end
end
always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterIn_addr = 0;
	end else if (AESL_slave_write_start_finish && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
		AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
	end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];

	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);

	@(posedge AESL_reset);
	while (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	for (i = 0; i < `AUTOTB_TRANSACTION_NUM; i = i + 1) begin
		latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
		lat_array[i] = latthistime;
		if (latthistime > latmax) latmax = latthistime;
		if (latthistime < latmin) latmin = latthistime;
		lattotal = lattotal + latthistime;
		if (`AUTOTB_TRANSACTION_NUM == 1) begin
			thrthistime = latthistime;
		end else begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
		end
		thr_array[i] = thrthistime;
		if (thrthistime > thrmax) thrmax = thrthistime;
		if (thrthistime < thrmin) thrmin = thrthistime;
		thrtotal = thrtotal + thrthistime;
	end

	lataver = lattotal / `AUTOTB_TRANSACTION_NUM;
	thraver = thrtotal / `AUTOTB_TRANSACTION_NUM;

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax);
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin);
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver);
	end else begin
		// $::AESL_AUTOTB::g_axi_slave_port_list != ""
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", lataver);
	end

	$fclose(fp);

	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		i = 0;
		thr_array[i] = 0;
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end else begin
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
		end
	end
	$fclose(fp);
end

endmodule
